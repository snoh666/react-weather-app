{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","weatherData","setWeatherData","_useState3","_useState4","refresh","setRefresh","_useState5","_useState6","temperature","setTempereture","_useState7","_useState8","clock","setClock","useEffect","update","navigator","geolocation","getCurrentPosition","data","fetch","concat","coords","latitude","longitude","then","response","json","console","log","length","hours","Date","getHours","minutes","getMinutes","weatherDataFromFetch","timezone","currently","icon","summary","catch","err","react_default","a","createElement","className","join","onClick","e","preventDefault","iconId","undefined","iconIdFixed","toUpperCase","replace","react_skycons_default","color","autoplay","setSkycon","temperatureCels","toFixed","temperatureFahr","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab187134.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Skycons from 'react-skycons';\n\n\nconst App = () => {\n  const proxyHeroku = `https://cors-anywhere.herokuapp.com/`;\n  const [weatherData, setWeatherData] = useState([]);\n  const [refresh, setRefresh] = useState(0);\n  const [temperature, setTempereture] = useState([]);\n  const [clock, setClock] = useState([]);\n  const getRefresh = e => {\n    e.preventDefault();\n    setRefresh(refresh + 1);\n  };\n\n  useEffect(() => {\n    update();\n  }, [refresh]);\n\n  const temperatureChange = () => {\n    if(temperature[1] === 'Fahr') {\n      let temperatureCels = (temperature[0]-32)*5/9;\n      setTempereture([temperatureCels.toFixed(), 'Cels']);\n    } else if (temperature[1] === 'Cels') {\n      let temperatureFahr = (temperature[0]*9/5)+32;\n      setTempereture([temperatureFahr.toFixed(), 'Fahr']);\n    }\n  };\n\n  const update = () => {\n    if(navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(data => {\n        fetch(`${proxyHeroku}https://api.darksky.net/forecast/56be0ef4bc8f4cdffa9f0de805515c04/${data.coords.latitude},${data.coords.longitude}`)\n          .then(response => {\n            return response.json();\n          }).then(data => {\n            console.log(data);\n            if(clock.length !== 1) {\n              let hours = new Date().getHours();\n              let minutes = new Date().getMinutes();\n\n              if(hours <= 9) {\n                hours = '0' + hours;\n              }\n              if(minutes <= 9) {\n                minutes = '0' + minutes;\n              }\n              setClock([hours, minutes]);\n            }\n\n            let weatherDataFromFetch = [data.timezone, data.currently.icon, data.currently.summary];\n            setTempereture([data.currently.temperature, 'Fahr']);\n            setWeatherData(weatherDataFromFetch);\n          }).catch( err => console.log(err));\n      });\n    }\n  };\n  const setSkycon = (iconId) => {\n    if(iconId !== undefined) {\n      let iconIdFixed = iconId.toUpperCase().replace('-', '_');\n      return (\n        <Skycons color=\"white\" autoplay={true} icon={iconIdFixed} />\n      );\n    } else {\n      return (\n        <h2>Icon unavaible allow location get or wait for database connection..</h2>\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"clock\">\n        <div className=\"timezone\">\n          <div className=\"timezone-info\">Timezone:</div>\n          {weatherData[0]}\n        </div>\n        {clock.join(':')}</div>\n      <button onClick={getRefresh}>Refresh</button>\n      <div className=\"app-info\">\n        <h1>{weatherData[2]}</h1>\n        <div className=\"icon\">{setSkycon(weatherData[1])}</div>\n      </div>\n      <div className=\"temperature\" onClick={temperatureChange}>\n        <div className=\"temperature-info\">Click to convert</div>\n        {temperature.join(' ')}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}